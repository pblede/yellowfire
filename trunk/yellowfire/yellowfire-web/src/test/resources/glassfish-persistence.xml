<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.0" xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">
  <persistence-unit name="glassfish-yellowfire-test" transaction-type="JTA">

      <!--<provider>org.hibernate.ejb.HibernatePersistence</provider>-->
      <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
      <!--Note: Use the following for global scoped data sources -->
      <jta-data-source>yellowfire/ds</jta-data-source>

      <class>za.co.yellowfire.domain.Contact</class>
      <class>za.co.yellowfire.domain.Venue</class>

      <class>za.co.yellowfire.domain.profile.UserProperty</class>
      <class>za.co.yellowfire.domain.profile.Profile</class>

      <class>za.co.yellowfire.domain.result.Result</class>

      <class>za.co.yellowfire.domain.racing.RaceSponsor</class>
      <class>za.co.yellowfire.domain.racing.Race</class>
      <class>za.co.yellowfire.domain.racing.Note</class>
      <class>za.co.yellowfire.domain.racing.GraphicLink</class>
      <class>za.co.yellowfire.domain.racing.CourseCategory</class>
      <class>za.co.yellowfire.domain.racing.Course</class>
      <class>za.co.yellowfire.domain.racing.CategoryPrize</class>
      <class>za.co.yellowfire.domain.racing.CategoryFee</class>
      <class>za.co.yellowfire.domain.racing.RaceRegistration</class>
      <class>za.co.yellowfire.domain.racing.District</class>
      <class>za.co.yellowfire.domain.racing.Club</class>

      <class>za.co.yellowfire.domain.training.Category</class>
      <class>za.co.yellowfire.domain.training.ContentType</class>
      <class>za.co.yellowfire.domain.training.Outcome</class>
      <class>za.co.yellowfire.domain.training.SkillArea</class>
      <class>za.co.yellowfire.domain.training.TrainingCourse</class>
      <class>za.co.yellowfire.domain.training.TrainingCourse</class>
      <class>za.co.yellowfire.domain.training.TrainingCourseDate</class>
      <class>za.co.yellowfire.domain.training.TrainingProvider</class>

        
      
        <!-- Note: Use the following for application scoped data sources-->
        <!--jta-data-source>java:/app/jdbc/bluefire.ds</jta-data-source-->

        <properties>
        <!--
        The EclipseLink session name. Used by the code to retrieve the current EclipseLink session
        -->
        <!--property name="eclipselink.session-name" value="yellowfire"/-->
        <!--
            Note: Use the following for Weblogic 10.3.2+ -->
        <!--property name="eclipselink.target-server" value="WebLogic_10" /-->
        <!--property name="eclipselink.target-server" value="JBoss"/-->
        <property name="eclipselink.target-database" value="SQLServer"/>
        <!--
            Note: Use this with application-scoped data sources
            <property name="javax.persistence.jtaDataSource" value="java:/app/jdbc/yellowfire" /-->
        <!-- Enable or disable EclipseLink's generation of database platform-specific SQL (as opposed to generic SQL).
        true – enable EclipseLink's generation of database platform-specific SQL.
        false – disable generation of database platform-specific SQL by EclipseLink.
        -->
        <property name="eclipselink.jdbc.native-sql" value="true"/>
        <!-- Logging
        OFF		This setting disables the generation of the log output. You may want to set logging to OFF during production to avoid the overhead of logging.
        SEVERE	This level enables reporting of failure cases only. Usually, if the failure occurs, the application stops.
        WARNING	This level enables logging of issues that have a potential to cause problems. For example, a setting that is picked by the application and not by the user.
        INFO		This level enables the standard output. The contents of this output is very limited. It is the default logging level if a logging level is not set.
        CONFIG	This level enables logging of such configuration details as your database login information and some metadata information. You may want to use the CONFIG log level at deployment time.
        FINE	 	This level enables logging of the first level of the debugging information and SQL. You may want to use this log level during debugging and testing, but not at production.
        FINER		This level enables logging of more debugging information than the FINE setting. For example, the transaction information is logged at this level. You may want to use this log level during debugging and testing, but not at production.
        FINEST	This level enables logging of more debugging information than the FINER setting, such as a very detailed information about certain features (for example, sequencing). You may want to use this log level during debugging and testing, but not at production.
        ALL		This level currently logs at the same level as FINEST.
        -->
        <property name="eclipselink.logging.level" value="ALL"/>
        <property name="eclipselink.logging.timestamp" value="true"/>
        <property name="eclipselink.logging.session" value="true"/>
        <property name="eclipselink.logging.thread" value="true"/>
        <property name="eclipselink.logging.exceptions" value="true"/>
        <!-- Control whether or not the query uses parameter binding
            Note: Default is true
            true – bind all parameters.
            false – do not bind parameters.
            -->
        <property name="eclipselink.jdbc.bind-parameters" value="false"/>
        <!-- Specify the use of batch writing to optimize transactions with multiple write operations
            JDBC – use JDBC batch writing.
            Buffered – do not use either JDBC batch writing nor native platform batch writing.
            Oracle-JDBC – use both JDBC batch writing and Oracle native platform batch writing.
            Use OracleJDBC in your property map.
            None – do not use batch writing (turn it off).
            -->
        <property name="eclipselink.jdbc.batch-writing" value="JDBC"/>
        <!-- Enable or disable EclipseLink internal statement caching
            Note: Default is false
            Note: we recommend enabling this functionality if you are using EclipseLink connection pooling.
            true – enable EclipseLink's internal statement caching.
            false – disable internal statement caching.
            -->
        <property name="eclipselink.jdbc.brokerCache-statements" value="true"/>
        <!--The number of statements held when using internal statement caching.
        Note: Default is 50
        -->
        <property name="eclipselink.jdbc.brokerCache-statements.size" value="50"/>
        <!-- Specify when a write connection is acquired lazily. For more information, see Lazy Connection Acquisition
            Note: Default is true
            true - aquire the write connection lazily.
            false - do not aquire the write connection lazily.
            -->
        <property name="eclipselink.jdbc.exclusive-connection.is-lazy" value="true"/>
        <!-- Specify when EclipseLink should perform reads through a write connection. For more information, see Exclusive Write Connections.
            Note: Default is Transactional

            You can set this property while creating either an EntityManagerFactory (either in the map passed to the createEntityManagerFactory method, or in the persistence.xml file), or an EntityManager (in the map passed to the createEntityManager method). Note that the latter overrides the former.

            The following are the valid values for the use in a persistence.xml file and for the org.eclipse.persistence.config.ExclusiveConnectionMode:

            Transactional - Create an isolated client session (see Isolated Client Sessions) if some or all entities require isolated brokerCache 4 ; otherwise, create a client session.
            Note: EclipseLink keeps the connection exclusive for the duration of the transaction. Inside the transaction, EclipseLink performs all writes and reads through the exclusive connection. However, outside the Eclipelink transaction, a new connection is acquired from the connection pool for each read and released back immediately after the query is executed.
            Isolated - Create an exclusive isolated client session if reading an isolated Entity; otherwise, raise an error.
            Note: EclipseLink keeps the connection exclusive for the lifetime of the owning EntityManager. Inside the transaction, EclipseLink performs all writes and reads through the exclusive connection. However, outside the Eclipelink transaction only isolated entities are read through the exclusive connection; for nonisolated entities, a new connection is acquired from the connection pool for each read and released back immediately after the query is executed.
            Always - Create an exclusive isolated client session (see Isolated Client Sessions) if reading an isolated Entity; otherwise, create an exclusive client session.
            Note: EclipseLink keeps the connection exclusive for the lifetime of the owning EntityManager and performs all writes and reads through the exclusive connection.
            For more information, see Configuring Connection Policy.
            -->
        <property name="eclipselink.jdbc.exclusive-connection.mode" value="Transactional"/>
        <!-- Profiler
            PerformanceProfiler – Use EclipseLink performance profiler (org.eclipse.persistence.tools.profiler.PerformanceProfiler class). For more information, see Measuring EclipseLink Performance with the EclipseLink Profiler.
            QueryMonitor        – Monitor query executions and brokerCache hits (org.eclipse.persistence.tools.profiler.QueryMonitor class).This option provides a simple low-overhead means for measuring performance of query executions and brokerCache hits. You may want to use this option for performance analysis in a complex system.
            NoProfiler          – Do not use a performance profiler.
            Custom profiler     – Use your own custom profiler class. Create it by implementing the org.eclipse.persistence.sessions.SessionProfiler interface and providing a no-argument constructor.
            -->
        <property name="eclipselink.profiler" value="NoProfiler"/>
        <property name="eclipselink.orm.validate.schema" value="true"/>
        <property name="eclipselink.exclude-eclipselink-orm" value="true"/>

        <!--
        Integrate Compass into EclipseLink
        -->
        <!--property name="eclipselink.session.customizer" value="za.co.yellowfire.manager.CompassSessionCustomizer" /-->
        <!--property name="compass.engine.connection" value="file://C:/Shared/Projects.Java" /-->
        <!--property name="compass.debug" value="true"/-->
        

        <!-- EclipseLink Connection Pool *WRITE* -->
        <!--property name="eclipselink.connection-pool.default.jtaDataSource" value="yellowfire.training.online.ds" /-->

        <!-- EclipseLink Connection Pool *ARCHIVE* -->
        <!--property name="eclipselink.connection-pool.archive.jtaDataSource" value="yellowfire.training.archive.ds" /-->
    </properties>
  </persistence-unit>
</persistence>
